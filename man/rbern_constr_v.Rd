% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rbern_constr_v}
\alias{rbern_constr_v}
\title{Random Draws of Bernoulli Variables Subject to Global Constraints}
\usage{
rbern_constr_v(x, R, V, z, qweights, pweights, qvote, pvote, adapt, rate, step,
  verbose)
}
\arguments{
\item{x}{(required) the vector of probabilities.}

\item{R}{(required) how many 1's does the the final draw have to have?}

\item{V}{(required) how many of the first \code{V} entries of a draw have the be 1?}

\item{z}{(required) if \code{z==1} all constrains are obeyed, if \code{z==0} all constraints are not.}

\item{qweights}{(required) integer numbers. The first weights attached to a draw.}

\item{pweights}{(required) integer numbers. The second weights attached to a draw.}

\item{qvote}{(required) the smallest sum of \code{qweights} for all entries that are non-zero 
in a draw before the draw is accepted. If \code{qvote=0} the \code{pweights} are ignored.}

\item{pvote}{(required) the smallest sum of \code{pweights} for all entries that are non-zero 
in a draw before the draw is accepted. If \code{qvote=pvote} the \code{pweights} are ignored.}

\item{adapt}{(required) 0 deactivates adaption algorithm 2 in Marbach (2016), 1 enables it.}

\item{rate}{(required) schedule for the adaption with algorithm 2}

\item{step}{(required) \eqn{\epsilon}-parameter in algorithm 2}

\item{verbose}{(required) use \code{0} for no output; use any positive natural number to report progress at each \code{verbose}-th iteration.}
}
\value{
\code{vector} of draws.
}
\description{
\code{rbern_constr_v} draws a vector of Bernoulli variables subject to global constraints such as 
the number of 1's in each draw.
}
\details{
The function is part of the Gibbs sampler used for \code{BayesPMP()}. The function runs in \code{C++}.
The function draws a random vector of Bernoulli variables and checks the global constraints. 
If the draw does not obey the constraints  a new draw is obtained until the constraints are met.
}
\examples{
 \dontrun{
 # Can be used to simulate vote choices of 3-member committee that has passed a proposal with majority rule
 
 # Vote choice probabilities 
 p <- c(0.2,0.3,0.4)
 R <- 2
 V <- 0 
 z <- 1 
 pweights <- qweights <- rep(1,3)
 qvote <- pvote <- 0
 adapt <- 1
 rate <- 200 
 step <- 0.05
 verbose <- 0
 
 rbern_constr_v(x=p, R=R, V=V, z=z, qweights=qweights, pweights=pweights, qvote=qvote, 
   pvote=pvote, adapt=adapt, rate=rate, step=step, verbose=verbose)
 }
 

}

