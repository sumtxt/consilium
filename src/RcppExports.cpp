// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// check_vprofile
int check_vprofile(NumericVector ydraw, int V, int R, int I, int qvote, int pvote, IntegerVector qweights, IntegerVector pweights);
RcppExport SEXP consilium_check_vprofile(SEXP ydrawSEXP, SEXP VSEXP, SEXP RSEXP, SEXP ISEXP, SEXP qvoteSEXP, SEXP pvoteSEXP, SEXP qweightsSEXP, SEXP pweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ydraw(ydrawSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type qvote(qvoteSEXP);
    Rcpp::traits::input_parameter< int >::type pvote(pvoteSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qweights(qweightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pweights(pweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_vprofile(ydraw, V, R, I, qvote, pvote, qweights, pweights));
    return rcpp_result_gen;
END_RCPP
}
// rbern_constr_v
NumericVector rbern_constr_v(NumericVector x, int R, int V, int z, IntegerVector qweights, IntegerVector pweights, int qvote, int pvote, int adapt, int rate, double step, int verbose);
RcppExport SEXP consilium_rbern_constr_v(SEXP xSEXP, SEXP RSEXP, SEXP VSEXP, SEXP zSEXP, SEXP qweightsSEXP, SEXP pweightsSEXP, SEXP qvoteSEXP, SEXP pvoteSEXP, SEXP adaptSEXP, SEXP rateSEXP, SEXP stepSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qweights(qweightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pweights(pweightsSEXP);
    Rcpp::traits::input_parameter< int >::type qvote(qvoteSEXP);
    Rcpp::traits::input_parameter< int >::type pvote(pvoteSEXP);
    Rcpp::traits::input_parameter< int >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< int >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rbern_constr_v(x, R, V, z, qweights, pweights, qvote, pvote, adapt, rate, step, verbose));
    return rcpp_result_gen;
END_RCPP
}
// consiliumcA
List consiliumcA(arma::mat X, NumericVector y, IntegerVector z, int K, IntegerVector Is, int J, IntegerVector Rs, IntegerVector Vs, IntegerMatrix qweights, IntegerMatrix pweights, IntegerVector qvote, IntegerVector pvote, IntegerVector pslct, IntegerVector qslct, IntegerVector miss, int NGIBBS, int NTHIN, int NBURN, int VERBOSE, int adapt, int rate, double step, int VERBOSE2, arma::mat invB0, arma::colvec b0, arma::colvec betastart, double omegastart, int G, IntegerVector alpha_idx, IntegerVector nG, double e0, double f0);
RcppExport SEXP consilium_consiliumcA(SEXP XSEXP, SEXP ySEXP, SEXP zSEXP, SEXP KSEXP, SEXP IsSEXP, SEXP JSEXP, SEXP RsSEXP, SEXP VsSEXP, SEXP qweightsSEXP, SEXP pweightsSEXP, SEXP qvoteSEXP, SEXP pvoteSEXP, SEXP pslctSEXP, SEXP qslctSEXP, SEXP missSEXP, SEXP NGIBBSSEXP, SEXP NTHINSEXP, SEXP NBURNSEXP, SEXP VERBOSESEXP, SEXP adaptSEXP, SEXP rateSEXP, SEXP stepSEXP, SEXP VERBOSE2SEXP, SEXP invB0SEXP, SEXP b0SEXP, SEXP betastartSEXP, SEXP omegastartSEXP, SEXP GSEXP, SEXP alpha_idxSEXP, SEXP nGSEXP, SEXP e0SEXP, SEXP f0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Is(IsSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Vs(VsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type qweights(qweightsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type pweights(pweightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qvote(qvoteSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pvote(pvoteSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pslct(pslctSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qslct(qslctSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type miss(missSEXP);
    Rcpp::traits::input_parameter< int >::type NGIBBS(NGIBBSSEXP);
    Rcpp::traits::input_parameter< int >::type NTHIN(NTHINSEXP);
    Rcpp::traits::input_parameter< int >::type NBURN(NBURNSEXP);
    Rcpp::traits::input_parameter< int >::type VERBOSE(VERBOSESEXP);
    Rcpp::traits::input_parameter< int >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< int >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type VERBOSE2(VERBOSE2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invB0(invB0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betastart(betastartSEXP);
    Rcpp::traits::input_parameter< double >::type omegastart(omegastartSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type alpha_idx(alpha_idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nG(nGSEXP);
    Rcpp::traits::input_parameter< double >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< double >::type f0(f0SEXP);
    rcpp_result_gen = Rcpp::wrap(consiliumcA(X, y, z, K, Is, J, Rs, Vs, qweights, pweights, qvote, pvote, pslct, qslct, miss, NGIBBS, NTHIN, NBURN, VERBOSE, adapt, rate, step, VERBOSE2, invB0, b0, betastart, omegastart, G, alpha_idx, nG, e0, f0));
    return rcpp_result_gen;
END_RCPP
}
// consiliumppc
arma::mat consiliumppc(arma::mat posterior, arma::mat X, IntegerVector Rs, IntegerVector Vs, IntegerVector Is, IntegerVector qvote, IntegerVector pvote, IntegerMatrix qweights, IntegerMatrix pweights, IntegerVector pslct, IntegerVector qslct, int J, int K, int NSAMP, int SIM, int VERBOSE);
RcppExport SEXP consilium_consiliumppc(SEXP posteriorSEXP, SEXP XSEXP, SEXP RsSEXP, SEXP VsSEXP, SEXP IsSEXP, SEXP qvoteSEXP, SEXP pvoteSEXP, SEXP qweightsSEXP, SEXP pweightsSEXP, SEXP pslctSEXP, SEXP qslctSEXP, SEXP JSEXP, SEXP KSEXP, SEXP NSAMPSEXP, SEXP SIMSEXP, SEXP VERBOSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Vs(VsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Is(IsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qvote(qvoteSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pvote(pvoteSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type qweights(qweightsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type pweights(pweightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pslct(pslctSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qslct(qslctSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type NSAMP(NSAMPSEXP);
    Rcpp::traits::input_parameter< int >::type SIM(SIMSEXP);
    Rcpp::traits::input_parameter< int >::type VERBOSE(VERBOSESEXP);
    rcpp_result_gen = Rcpp::wrap(consiliumppc(posterior, X, Rs, Vs, Is, qvote, pvote, qweights, pweights, pslct, qslct, J, K, NSAMP, SIM, VERBOSE));
    return rcpp_result_gen;
END_RCPP
}
